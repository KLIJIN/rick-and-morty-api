{"version":3,"sources":["state/actions.js","state/reducers/filter_reducer.js","state/reducers/episodes_reducer.js","state/context/episodes_context.js","state/context/filter_context.js","Components/SearchForm.js","Components/Stories.js","Components/Buttons.js","Pages/HompePage.js","Pages/SingleEpisodePage.js","App.js","index.js"],"names":["SET_LOADING","SET_STORIES","REMOVE_STORY","HANDLE_PAGE","HANDLE_SEARCH","GET_SINGLE_STORY_BEGIN","GET_SINGLE_STORY_SUCCESS","GET_SINGLE_STORY_ERROR","LOAD_STORIES","UPDATE_FILTERS","FILTER_STORIES","setStoriesAction","data","hits","nbPages","nextPage","prevPage","type","payload","filter_reducer","state","action","tempStories","all_stories","filtered_stories","filters","name","value","text","filter","story","toLowerCase","indexOf","console","log","initialState","isLoading","query","page","reducer","id","single_story_loading","single_story_error","single_story","EpisodesContext","createContext","EpisodesProvider","children","useReducer","EpisodesReducer","dispatch","currentPage","fetchStories","url","a","fetch","response","json","results","info","pages","next","prev","useEffect","fetchSingleStory","Provider","removeStory","removeStoryAction","handlePage","handlePageAction","useEpisodesContext","useContext","localStorage","getItem","JSON","parse","FilterContext","React","FilterProvider","setItem","stringify","updateFilters","e","target","updateFiltersAction","useFilterContext","SearchForm","className","onSubmit","preventDefault","placeholder","onChange","Stories","stories","length","map","item","air_date","episode","date","Date","day","getDate","month","getMonth","year","getFullYear","slice","to","Buttons","disabled","onClick","bind","HomePage","SingleEpisodePage","useParams","loading","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16cca58e.chunk.js","sourcesContent":["export const SET_LOADING = 'SET_LOADING'\r\nexport const SET_STORIES = 'SET_STORIES'\r\nexport const REMOVE_STORY = 'REMOVE_STORY'\r\nexport const HANDLE_PAGE = 'HANDLE_PAGE'\r\nexport const HANDLE_SEARCH = 'HANDLE_SEARCH'\r\nexport const GET_SINGLE_STORY_BEGIN = 'GET_SINGLE_STORY_BEGIN'\r\nexport const GET_SINGLE_STORY_SUCCESS = 'GET_SINGLE_STORY_SUCCESS'\r\nexport const GET_SINGLE_STORY_ERROR = 'GET_SINGLE_STORY_ERROR'\r\nexport const LOAD_STORIES = 'LOAD_STORIES'\r\nexport const UPDATE_FILTERS = 'UPDATE_FILTERS'\r\nexport const FILTER_STORIES = 'FILTER_STORIES'\r\nexport const CLEAR_FILTERS = 'CLEAR_FILTERS'\r\n\r\n\r\nexport const setLoadingAction = () => {\r\n  return { type: SET_LOADING }\r\n}\r\n\r\nexport const setStoriesAction = (data) => {\r\n  const { hits, nbPages, nextPage, prevPage } = data;\r\n  return {\r\n    type: SET_STORIES,\r\n    payload: {\r\n      hits: hits,\r\n      nbPages: nbPages,\r\n      nextPage: nextPage,\r\n      prevPage: prevPage,\r\n    }\r\n  }\r\n}\r\n\r\nexport const removeStoryAction = (id) => {\r\n  return {\r\n    type: REMOVE_STORY,\r\n    payload: { id: id }\r\n  }\r\n}\r\n\r\nexport const handlePageAction = (value) => {\r\n  return {\r\n    type: HANDLE_PAGE,\r\n    payload: value\r\n  }\r\n}\r\n\r\n\r\nexport const handleSearchAction = (query, page) => {\r\n  return {\r\n    type: HANDLE_SEARCH,\r\n    payload: {\r\n      query: query,\r\n      page: page\r\n    }\r\n  }\r\n}\r\n\r\nexport const loadStoriesAction = (strories) => {\r\n  return {\r\n    type: LOAD_STORIES,\r\n    payload: strories\r\n  }\r\n}\r\n\r\nexport const filterStoriesAction = () => {\r\n  return { type: FILTER_STORIES }\r\n}\r\n\r\n\r\nexport const updateFiltersAction = ({ name, value }) => {\r\n  return {\r\n    type: UPDATE_FILTERS,\r\n    payload: { name, value }\r\n  }\r\n}\r\n\r\nexport const GetSingleStoryBeginAct = () => {\r\n  return (\r\n    { type: GET_SINGLE_STORY_BEGIN }\r\n  )\r\n}\r\n\r\nexport const GetSingleStorySuccessAct = (story) => {\r\n  return {\r\n    type: GET_SINGLE_STORY_SUCCESS,\r\n    payload: story\r\n  }\r\n}\r\n\r\nexport const GetSingleStoryErrorAct = () => {\r\n  return (\r\n    { type: GET_SINGLE_STORY_ERROR }\r\n  )\r\n}","import { LOAD_STORIES, UPDATE_FILTERS, FILTER_STORIES, CLEAR_FILTERS, } from '../actions'\r\n\r\nconst filter_reducer = (state, action) => {\r\n  // debugger;\r\n  let tempStories = []\r\n  switch (action.type) {\r\n    //-------------------------------------------------------------------------------------\r\n    case LOAD_STORIES:\r\n      return {\r\n        ...state,\r\n        all_stories: [...action.payload],  //редьюсер возвращает стейт, а в all_stories кладет hits из верхнего контекста\r\n        filtered_stories: [...action.payload],\r\n        filters: { ...state.filters }\r\n      };\r\n    //-------------------------------------------------------------------------------------\r\n    case UPDATE_FILTERS:\r\n      const { name, value } = action.payload\r\n      return { ...state, filters: { ...state.filters, [name]: value } }\r\n    //==================FILTER_STORIES=====================================================\r\n    case FILTER_STORIES:\r\n      const { all_stories } = state;\r\n      tempStories = [...all_stories];\r\n      const { text } = state.filters\r\n      // filtering\r\n      tempStories = tempStories.filter((story) => story.name.toLowerCase().indexOf(text.toLowerCase()) >= 0)\r\n      return { ...state, filtered_stories: tempStories }\r\n    //============//=====FILTER_STORIES=====//==============================================\r\n    case CLEAR_FILTERS:\r\n      console.log(\"filter_reducer CLEAR_FILTERS\")\r\n      return {\r\n        ...state,\r\n        filters: { ...state.filters, text: '' }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n}\r\n\r\nexport default filter_reducer","import {\r\n  SET_LOADING, SET_STORIES, REMOVE_STORY, HANDLE_PAGE, HANDLE_SEARCH, GET_SINGLE_STORY_BEGIN,\r\n  GET_SINGLE_STORY_SUCCESS, GET_SINGLE_STORY_ERROR\r\n\r\n} from '../actions.js'\r\n\r\nconst initialState = {\r\n  isLoading: true,\r\n  hits: [],\r\n  query: \"\",\r\n  page: 1,\r\n  nbPages: 0\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  console.log(\" Episodes REDUCER ->>>\", action);\r\n  switch (action.type) {\r\n    //-------------------------------------------------------------------------------------------------------------\r\n    case SET_LOADING:\r\n      return { ...state, isLoading: true }\r\n    //-------------------------------------------------------------------------------------------------------------\r\n    case SET_STORIES:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        hits: action.payload.hits,\r\n        nbPages: action.payload.nbPages,\r\n        nextPage: action.payload.nextPage,\r\n        prevPage: action.payload.prevPage,\r\n      }\r\n    //-------------------------------------------------------------------------------------------------------------\r\n    case REMOVE_STORY:\r\n      return {\r\n        ...state,\r\n        hits: state.hits.filter(story => story.id !== action.payload.id)\r\n      }\r\n    //-------------------------------------------------------------------------------------------------------------\r\n    case HANDLE_SEARCH:\r\n      console.log(\"reducer\", state, action)\r\n      return {\r\n        ...state,\r\n        query: action.payload.query,\r\n        page: action.payload.page\r\n      }\r\n    //-------------------------------------------------------------------------------------------------------------\r\n    case HANDLE_PAGE:\r\n      if (action.payload === \"inc\") {\r\n        let nextPage = state.page + 1\r\n        if (nextPage > state.nbPages) {\r\n          nextPage = 1\r\n        }\r\n        return { ...state, page: nextPage }\r\n      }\r\n      else if (action.payload === \"dec\") {\r\n        let prevPage = state.page - 1\r\n        if (prevPage < 1) {\r\n          prevPage = state.nbPages\r\n        }\r\n        return { ...state, page: prevPage }\r\n      }\r\n\r\n    //-----------------------------------\r\n    case GET_SINGLE_STORY_BEGIN:\r\n      return { ...state, single_story_loading: true, single_story_error: false, };\r\n    case GET_SINGLE_STORY_SUCCESS:\r\n      // debugger;\r\n      return {\r\n        ...state,\r\n        single_story_loading: false,\r\n        single_story: action.payload,\r\n      }\r\n    case GET_SINGLE_STORY_ERROR:\r\n      return { ...state, single_story_loading: false, single_story_error: true, };\r\n    //-----------------------------------\r\n  }\r\n\r\n}\r\nexport default reducer\r\n","import React, { useContext, useEffect, useReducer, createContext } from 'react'\r\nimport {\r\n  setLoadingAction, setStoriesAction, removeStoryAction, handlePageAction,\r\n  GetSingleStoryBeginAct, GetSingleStorySuccessAct, GetSingleStoryErrorAct\r\n} from '../actions.js'\r\nimport EpisodesReducer from '../reducers/episodes_reducer'\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n  isLoading: true,\r\n  hits: [],\r\n  page: 1,\r\n  nextPage: null,\r\n  prevPage: null,\r\n  nbPages: 0,\r\n  single_story_loading: false,\r\n  single_story_error: false,\r\n  single_story: {}\r\n}\r\n\r\nconst EpisodesContext = createContext()\r\n\r\nconst EpisodesProvider = ({ children }) => {\r\n\r\n  const [state, dispatch] = useReducer(EpisodesReducer, initialState);\r\n\r\n  const url = \"https://rickandmortyapi.com/api/episode?page=\";\r\n  const currentPage = state.page;\r\n\r\n  const fetchStories = async (url, currentPage) => {\r\n    dispatch(setLoadingAction())\r\n    try {\r\n      const response = await fetch(`${url}${currentPage}`);\r\n      const data = await response.json();\r\n      // console.log(\"EpisodesProvider_fetchStories come data from API-->\", data);\r\n      dispatch(setStoriesAction({\r\n        hits: data.results,\r\n        nbPages: data.info.pages,\r\n        nextPage: data.info.next,\r\n        prevPage: data.info.prev,\r\n      }))\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    fetchStories(url, currentPage);\r\n  }, [state.page]);\r\n\r\n  const removeStory = (id) => {\r\n    dispatch(removeStoryAction(id))\r\n  }\r\n\r\n  const handlePage = (value) => {\r\n    dispatch(handlePageAction(value))\r\n  }\r\n\r\n\r\n\r\n  //загружает отдельный эпизод\r\n  const fetchSingleStory = async (url) => {\r\n\r\n    dispatch(GetSingleStoryBeginAct())\r\n    try {\r\n      const response = await fetch(`${url}`);\r\n      const data = await response.json();\r\n      console.log(\"EpisodesProvider SINGLE STORY-->\", data);\r\n      dispatch(GetSingleStorySuccessAct(data))\r\n      dispatch(setStoriesAction({ hits: data.results, nbPages: data.info.pages }))\r\n    } catch (error) {\r\n      dispatch(GetSingleStoryErrorAct())\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <EpisodesContext.Provider value={{ ...state, removeStory, handlePage, fetchSingleStory }}>\r\n      {children}\r\n    </EpisodesContext.Provider>\r\n  )\r\n}\r\n\r\n// make sure use\r\nexport const useEpisodesContext = () => {\r\n  return useContext(EpisodesContext)\r\n}\r\n\r\nexport { EpisodesContext, EpisodesProvider }\r\n\r\n","import React, { useEffect, useContext, useReducer } from 'react'\r\nimport {\r\n  loadStoriesAction,\r\n  updateFiltersAction, //обновляем Filter Provider filters: text\r\n  filterStoriesAction,\r\n  // clearFiltersAction,\r\n} from '../actions'\r\n\r\nimport reducer from '../reducers/filter_reducer'\r\nimport { useEpisodesContext } from './episodes_context'\r\n\r\n\r\nconst getLocalStorage = () => {\r\n  let cart = localStorage.getItem(\"text\");\r\n  if (cart) {\r\n    return JSON.parse(localStorage.getItem(\"text\"))\r\n  } else {\r\n    return \"\"\r\n  }\r\n}\r\n\r\n\r\nconst initialState = {\r\n  filtered_stories: [],\r\n  all_stories: [],\r\n  filters: {\r\n    text: getLocalStorage(),\r\n  },\r\n}\r\n\r\n\r\nconst FilterContext = React.createContext()\r\n\r\nexport const FilterProvider = ({ children }) => {\r\n\r\n  const { hits } = useEpisodesContext();\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"text\", JSON.stringify(state.filters.text));\r\n    dispatch(loadStoriesAction(hits)); //при загрузке контекста импортируем в редьюсере массив hits из EpisodesContext в массив filtered_stories\r\n  }, [hits, state.filters.text])\r\n\r\n  useEffect(() => {\r\n    dispatch(filterStoriesAction());  //FILTER_STORIES\r\n  }, [hits, state.filters])\r\n\r\n  const updateFilters = (e) => {\r\n    let name = e.target.name\r\n    let value = e.target.value\r\n    dispatch(updateFiltersAction({ name, value })); //UPDATE_FILTERS\r\n  }\r\n  // const clearFilters = () => {\r\n  //   dispatch(clearFiltersAction()); //CLEAR_FILTERS\r\n  // }\r\n\r\n  return (\r\n    <FilterContext.Provider value={{ ...state, updateFilters }}>\r\n      {children}\r\n    </FilterContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useFilterContext = () => {\r\n  return useContext(FilterContext);\r\n}","import React from 'react'\r\n// import { useGlobalContext } from '../state/context/episodes_context'\r\nimport { useFilterContext } from '../state/context/filter_context'\r\n\r\nconst SearchForm = () => {\r\n  // console.log(\"SearchForm\")\r\n  const { filters: { text }, updateFilters } = useFilterContext()\r\n\r\n  return (\r\n    <form className='search-form' onSubmit={(e) => e.preventDefault()}     >\r\n      <h2>search story</h2>\r\n      <input\r\n        type='text'\r\n        name=\"text\"\r\n        className='form-input'\r\n        placeholder=\"поиск по названию эпизода\"\r\n        value={text}\r\n        onChange={updateFilters}   // меняем стейт FilterProvider - filteres.text\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default SearchForm\r\n\r\n\r\n","\r\nimport React\r\n  // , { useContext } \r\n  from 'react'\r\nimport { useFilterContext } from '../state/context/filter_context'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst Stories = () => {\r\n  // console.log(\"Stories\")\r\n  const { filtered_stories: stories } = useFilterContext();\r\n\r\n  if (stories?.length < 1) {\r\n    return <div className=\"loading\"> </div>\r\n  }\r\n\r\n  return (\r\n    <section className=\"section\"  >\r\n      {stories.map((item) => {\r\n        const { id, name, air_date, episode } = item;\r\n        const date = new Date(air_date);\r\n        let day = date.getDate();\r\n        day = day < 10 ? (day = `0${day}`) : day;\r\n        let month = date.getMonth() + 1;\r\n        month = month < 10 ? (month = `0${month}`) : month;\r\n        let year = date.getFullYear();\r\n        return (\r\n          <div key={id}>\r\n            <h3> {name} </h3>\r\n            <div> Сезон: {+`${episode.slice(1, 3)}`} </div>\r\n            <div> Серия: {+`${episode.slice(4, 6)}`} </div>\r\n            <div> Премьера: {`${day}.${month}.${year}`} </div>\r\n            <Link to={`/episodes/${id}`} className=\"link\"> read more </Link>\r\n          </div>\r\n        );\r\n      })}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Stories\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { useEpisodesContext } from '../state/context/episodes_context'\r\n\r\nconst Buttons = () => {\r\n  // console.log(\"Buttons\");\r\n  const { isLoading, page, nbPages, handlePage } = useEpisodesContext() //достаем из контекста часть initialState\r\n\r\n  return (\r\n    <div className='btn-container'>\r\n      <button disabled={isLoading} onClick={() => handlePage('dec')}> Назад </button>\r\n      <p> {page} of {nbPages} </p>\r\n      <button disabled={isLoading} onClick={handlePage.bind(this, 'inc')}> Далее </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Buttons\r\n","\r\n//components\r\nimport SearchForm from \"../Components/SearchForm\"\r\nimport Stories from \"../Components/Stories\"\r\nimport Buttons from \"../Components/Buttons\"\r\n\r\nconst HomePage = () => {\r\n  // console.log(\"HomePage\")\r\n  return (\r\n    <div>\r\n      <SearchForm />\r\n      <Buttons />\r\n      <Stories />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HomePage","\r\nimport React, { useEffect } from 'react'\r\nimport {\r\n  useParams\r\n  // , useHistory \r\n} from 'react-router-dom'\r\nimport { useEpisodesContext } from '../state/context/episodes_context'\r\n\r\nfunction SingleEpisodePage() {\r\n  const url = 'https://rickandmortyapi.com/api/episode/'\r\n  const { id } = useParams()\r\n  // const history = useHistory()\r\n\r\n  // console.log(\"SingleEpisodePage\", id, history);\r\n\r\n  const { single_story_loading: loading, single_story: story, fetchSingleStory, } = useEpisodesContext() //достаем из контекста часть initialState\r\n  const { air_date,\r\n    //  characters, \r\n    episode, name } = story\r\n\r\n  // console.log(\"SingleEpisodePage\", air_date, characters, episode, name);\r\n\r\n  useEffect(() => {\r\n    fetchSingleStory(`${url}${id}`)\r\n  }, [id])\r\n\r\n  // useEffect(() => {\r\n  //   if (error) { //переадресация на главную страницу в случае ошибки\r\n  //     setTimeout(() => {\r\n  //       history.push('/')\r\n  //     }, 2000)\r\n  //   }\r\n  // }, [error])\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\"> </div>\r\n  }\r\n\r\n  const date = new Date(air_date);\r\n  let day = date.getDate();\r\n  day = day < 10 ? (day = `0${day}`) : day;\r\n  let month = date.getMonth() + 1;\r\n  month = month < 10 ? (month = `0${month}`) : month;\r\n  let year = date.getFullYear();\r\n\r\n  if (episode) {\r\n    return (\r\n      <section className=\"section\"  >\r\n        <h3> Название Эпизода: {name} </h3>\r\n        <div> Сезон: {+`${episode.slice(1, 3)}`} </div>\r\n        <div> Серия: {+`${episode.slice(4, 6)}`} </div>\r\n        <div> Премьера: {`${day}.${month}.${year}`} </div>\r\n      </section>\r\n    )\r\n  }\r\n\r\n  return <section className=\"section\">\r\n  </section>\r\n\r\n\r\n\r\n}\r\n\r\nexport default SingleEpisodePage","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css'\nimport HomePage from \"./Pages/HompePage.js\"\nimport SingleEpisodePage from \"./Pages/SingleEpisodePage\"\n\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\"> <HomePage />  </Route>\n        <Route exact path=\"/episodes/:id\" children={<SingleEpisodePage />} />\n      </Switch>\n      <Route exact path=\"/rick-and-morty-api/\"> <HomePage />  </Route>\n    </Router>\n  )\n}\n\nexport default App\n\n\n\n\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { EpisodesProvider } from './state/context/episodes_context'\nimport { FilterProvider } from './state/context/filter_context'\n\nReactDOM.render(\n  <React.StrictMode>\n    <EpisodesProvider>\n      <FilterProvider>\n        <App />\n      </FilterProvider>\n    </EpisodesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}